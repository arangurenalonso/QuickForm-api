using System.Reflection;
using QuickForm.Api;
using QuickForm.Api.Seed;
using QuickForm.Common.Application;
using QuickForm.Common.Infrastructure;
using QuickForm.Common.Presentation;
using QuickForm.Modules.Person.Host;
using QuickForm.Modules.Survey.Host;
using QuickForm.Modules.Users.Host;
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddExceptionHandler<GlobalExceptionHandler>();
builder.Services.AddProblemDetails();

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<DatabaseSeeder>(); 


Assembly[] moduleApplicationAssemblies = [
    QuickForm.Modules.Users.Application.AssemblyReference.Assembly,
    QuickForm.Modules.Survey.Application.AssemblyReference.Assembly,
    QuickForm.Modules.Person.Application.AssemblyReference.Assembly,
    ];

builder.Configuration.AddModuleConfiguration(["users", "survey", "person", "common"]);

string environment = builder.Configuration["Common:environment"] ?? "";

builder.Services.AddCommonServicesServices(
    [
        SurveyModule.ConfigureConsumers
    ], builder.Configuration, environment);

builder.Services.AddApplication(moduleApplicationAssemblies);
builder.Services.AddUsersModule(builder.Configuration);
builder.Services.AddSurveyModule(builder.Configuration);
builder.Services.AddPersonModule(builder.Configuration);

builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowSpecificOrigins",
        policyBuilder =>
        {
            policyBuilder
                   .SetIsOriginAllowed(_ => true)
                   .AllowAnyHeader()
                   .AllowAnyMethod()
                   .AllowCredentials();
        });
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
    app.ApplyMigrations();
    app.Use(async (ctx, next) =>
    {
        await next();
        ctx.Response.Headers.Remove("Strict-Transport-Security");
    });
}


app.UseHttpsRedirection();
app.UseRouting();
app.UseCors("AllowSpecificOrigins");

app.UseExceptionHandler();

app.UseAuthentication();    
app.UseAuthorization();

app.MapEndpoints();

app.MapPost("/api/admin/seed", async (DatabaseSeeder seeder, ILogger<DatabaseSeeder> logger) =>
{
    try
    {
        await seeder.SeedAsync();
        return Results.Ok("Database seeding completed successfully.");
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "An error occurred while executing the seeder.");
        return Results.Problem("Failed to execute database seeder.");
    }
});

await app.RunAsync();


// Abrir la consola de NuGet

// Seleccionar el Api
// Seleccionar la carpeta Persistencia de cada contexto

// Add-Migration ChangePermissionTable -Context UsersDbContext -OutputDir Migrations
// Add-Migration AuditConfiguration -Context SurveyDbContext -OutputDir Migrations
// Add-Migration AuditConfiguration -Context PersonDbContext -OutputDir Migrations

// //<auto-generated/>

//Correr el proyecto


//dotnet dev-certs https --clean
//dotnet dev-certs https --trust
//dotnet dev-certs https --check
