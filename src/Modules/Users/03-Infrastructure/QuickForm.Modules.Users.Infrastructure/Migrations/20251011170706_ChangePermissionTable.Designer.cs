// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickForm.Modules.Users.Persistence;

#nullable disable

namespace QuickForm.Modules.Users.Persistence.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20251011170706_ChangePermissionTable")]
    partial class ChangePermissionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Auth")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuickForm.Common.Domain.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ActionName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ChangesValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassOrigin")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdEntity")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserTransaction")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_AuditLog_Action");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_AuditLog_CreatedDate");

                    b.HasIndex("TransactionId")
                        .HasDatabaseName("IX_AuditLog_TransactionId");

                    b.HasIndex("TableName", "IdEntity")
                        .HasDatabaseName("IX_AuditLog_Table_Entity_Date");

                    b.ToTable("AuditLog", "Auth");
                });

            modelBuilder.Entity("QuickForm.Common.Infrastructure.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdOutboxMessage")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("inbox_messages", "Auth");
                });

            modelBuilder.Entity("QuickForm.Common.Infrastructure.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("InboxMessageId", "Name");

                    b.ToTable("inbox_message_consumers", "Auth");
                });

            modelBuilder.Entity("QuickForm.Common.Infrastructure.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("outbox_messages", "Auth");
                });

            modelBuilder.Entity("QuickForm.Common.Infrastructure.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("OutboxMessageId", "Name");

                    b.ToTable("outbox_message_consumers", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.ApplicationDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_ApplicationDomain_IsDeleted");

                    b.ToTable("Application", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_AuthActionDomain_IsDeleted");

                    b.ToTable("AuthActions", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionTokenDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiresAt");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUserAction")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Token");

                    b.Property<bool>("Used")
                        .HasColumnType("bit")
                        .HasColumnName("Used");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserAction");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_AuthActionTokenDomain_IsDeleted");

                    b.ToTable("AuthActionTokens", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.PermissionsActionsDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PermissionsActionsDomain_IsDeleted");

                    b.ToTable("PermissionsActions", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.PermissionsDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("IdAction")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdApplication")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdResources")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdAction");

                    b.HasIndex("IdApplication");

                    b.HasIndex("IdResources");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_PermissionsDomain_IsDeleted");

                    b.ToTable("Permissions", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.ResourcesDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_ResourcesDomain_IsDeleted");

                    b.ToTable("Resources", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.RoleDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_RoleDomain_IsDeleted");

                    b.ToTable("Role", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.RolePermissionsDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("IdPermission")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdPermission");

                    b.HasIndex("IdRole");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_RolePermissionsDomain_IsDeleted");

                    b.ToTable("RolePermissions", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.UserDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmailVerify")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChanged")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_UserDomain_IsDeleted");

                    b.ToTable("Users", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.UserRoleDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdUser");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_UserRoleDomain_IsDeleted");

                    b.ToTable("UserRole", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.ApplicationDomain", b =>
                {
                    b.OwnsOne("QuickForm.Common.Domain.DescriptionVO", "Description", b1 =>
                        {
                            b1.Property<Guid>("ApplicationDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");

                            b1.HasKey("ApplicationDomainId");

                            b1.ToTable("Application", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationDomainId");
                        });

                    b.OwnsOne("QuickForm.Common.Domain.KeyNameVO", "KeyName", b1 =>
                        {
                            b1.Property<Guid>("ApplicationDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("KeyName");

                            b1.HasKey("ApplicationDomainId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("UX_ApplicationDomain_KeyName");

                            b1.ToTable("Application", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationDomainId");
                        });

                    b.Navigation("Description");

                    b.Navigation("KeyName")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionDomain", b =>
                {
                    b.OwnsOne("QuickForm.Common.Domain.DescriptionVO", "Description", b1 =>
                        {
                            b1.Property<Guid>("AuthActionDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");

                            b1.HasKey("AuthActionDomainId");

                            b1.ToTable("AuthActions", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("AuthActionDomainId");
                        });

                    b.OwnsOne("QuickForm.Common.Domain.KeyNameVO", "KeyName", b1 =>
                        {
                            b1.Property<Guid>("AuthActionDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("KeyName");

                            b1.HasKey("AuthActionDomainId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("UX_AuthActionDomain_KeyName");

                            b1.ToTable("AuthActions", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("AuthActionDomainId");
                        });

                    b.Navigation("Description");

                    b.Navigation("KeyName")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionTokenDomain", b =>
                {
                    b.HasOne("QuickForm.Modules.Users.Domain.UserDomain", "User")
                        .WithMany("AuthActionTokens")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickForm.Modules.Users.Domain.AuthActionDomain", "Action")
                        .WithMany("UserActionTokens")
                        .HasForeignKey("IdUserAction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.PermissionsActionsDomain", b =>
                {
                    b.OwnsOne("QuickForm.Common.Domain.DescriptionVO", "Description", b1 =>
                        {
                            b1.Property<Guid>("PermissionsActionsDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");

                            b1.HasKey("PermissionsActionsDomainId");

                            b1.ToTable("PermissionsActions", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("PermissionsActionsDomainId");
                        });

                    b.OwnsOne("QuickForm.Common.Domain.KeyNameVO", "KeyName", b1 =>
                        {
                            b1.Property<Guid>("PermissionsActionsDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("KeyName");

                            b1.HasKey("PermissionsActionsDomainId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("UX_PermissionsActionsDomain_KeyName");

                            b1.ToTable("PermissionsActions", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("PermissionsActionsDomainId");
                        });

                    b.Navigation("Description");

                    b.Navigation("KeyName")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.PermissionsDomain", b =>
                {
                    b.HasOne("QuickForm.Modules.Users.Domain.PermissionsActionsDomain", "Action")
                        .WithMany("Permissions")
                        .HasForeignKey("IdAction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickForm.Modules.Users.Domain.ApplicationDomain", "Application")
                        .WithMany("Permissions")
                        .HasForeignKey("IdApplication")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickForm.Modules.Users.Domain.ResourcesDomain", "Resources")
                        .WithMany("Permissions")
                        .HasForeignKey("IdResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("QuickForm.Modules.Users.Domain.HttpMethodVO", "HttpMethod", b1 =>
                        {
                            b1.Property<Guid>("PermissionsDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("HttpMethod");

                            b1.HasKey("PermissionsDomainId");

                            b1.ToTable("Permissions", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("PermissionsDomainId");
                        });

                    b.OwnsOne("QuickForm.Modules.Users.Domain.PathUrlVO", "PathUrl", b1 =>
                        {
                            b1.Property<Guid>("PermissionsDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("PathUrl");

                            b1.HasKey("PermissionsDomainId");

                            b1.ToTable("Permissions", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("PermissionsDomainId");
                        });

                    b.OwnsOne("QuickForm.Common.Domain.KeyNameVO", "KeyName", b1 =>
                        {
                            b1.Property<Guid>("PermissionsDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("KeyName");

                            b1.HasKey("PermissionsDomainId");

                            b1.ToTable("Permissions", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("PermissionsDomainId");
                        });

                    b.Navigation("Action");

                    b.Navigation("Application");

                    b.Navigation("HttpMethod")
                        .IsRequired();

                    b.Navigation("KeyName")
                        .IsRequired();

                    b.Navigation("PathUrl")
                        .IsRequired();

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.ResourcesDomain", b =>
                {
                    b.OwnsOne("QuickForm.Common.Domain.DescriptionVO", "Description", b1 =>
                        {
                            b1.Property<Guid>("ResourcesDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");

                            b1.HasKey("ResourcesDomainId");

                            b1.ToTable("Resources", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("ResourcesDomainId");
                        });

                    b.OwnsOne("QuickForm.Common.Domain.KeyNameVO", "KeyName", b1 =>
                        {
                            b1.Property<Guid>("ResourcesDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("KeyName");

                            b1.HasKey("ResourcesDomainId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("UX_ResourcesDomain_KeyName");

                            b1.ToTable("Resources", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("ResourcesDomainId");
                        });

                    b.Navigation("Description");

                    b.Navigation("KeyName")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.RoleDomain", b =>
                {
                    b.OwnsOne("QuickForm.Common.Domain.DescriptionVO", "Description", b1 =>
                        {
                            b1.Property<Guid>("RoleDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");

                            b1.HasKey("RoleDomainId");

                            b1.ToTable("Role", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("RoleDomainId");
                        });

                    b.OwnsOne("QuickForm.Common.Domain.KeyNameVO", "KeyName", b1 =>
                        {
                            b1.Property<Guid>("RoleDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("KeyName");

                            b1.HasKey("RoleDomainId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("UX_RoleDomain_KeyName");

                            b1.ToTable("Role", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("RoleDomainId");
                        });

                    b.Navigation("Description");

                    b.Navigation("KeyName")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.RolePermissionsDomain", b =>
                {
                    b.HasOne("QuickForm.Modules.Users.Domain.PermissionsDomain", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("IdPermission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickForm.Modules.Users.Domain.RoleDomain", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.UserRoleDomain", b =>
                {
                    b.HasOne("QuickForm.Modules.Users.Domain.RoleDomain", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickForm.Modules.Users.Domain.UserDomain", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.ApplicationDomain", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionDomain", b =>
                {
                    b.Navigation("UserActionTokens");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.PermissionsActionsDomain", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.PermissionsDomain", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.ResourcesDomain", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.RoleDomain", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.UserDomain", b =>
                {
                    b.Navigation("AuthActionTokens");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
