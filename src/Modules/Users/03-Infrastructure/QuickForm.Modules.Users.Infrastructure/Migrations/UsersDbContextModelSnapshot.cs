// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickForm.Modules.Users.Persistence;

#nullable disable

namespace QuickForm.Modules.Users.Persistence.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    partial class UsersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Auth")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuickForm.Common.Infrastructure.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("inbox_messages", "Auth");
                });

            modelBuilder.Entity("QuickForm.Common.Infrastructure.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("InboxMessageId", "Name");

                    b.ToTable("inbox_message_consumers", "Auth");
                });

            modelBuilder.Entity("QuickForm.Common.Infrastructure.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("outbox_messages", "Auth");
                });

            modelBuilder.Entity("QuickForm.Common.Infrastructure.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("OutboxMessageId", "Name");

                    b.ToTable("outbox_message_consumers", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AuthActions", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionTokenDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUserAction")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Used")
                        .HasColumnType("bit")
                        .HasColumnName("Used");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserAction");

                    b.ToTable("AuthActionTokens", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.UserDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEmailVerify")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChanged")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", "Auth");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionDomain", b =>
                {
                    b.OwnsOne("QuickForm.Modules.Users.Domain.ActionDescriptionVO", "Description", b1 =>
                        {
                            b1.Property<Guid>("AuthActionDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Description");

                            b1.HasKey("AuthActionDomainId");

                            b1.ToTable("AuthActions", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("AuthActionDomainId");
                        });

                    b.Navigation("Description")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionTokenDomain", b =>
                {
                    b.HasOne("QuickForm.Modules.Users.Domain.UserDomain", "User")
                        .WithMany("AuthActionTokens")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickForm.Modules.Users.Domain.AuthActionDomain", "Action")
                        .WithMany("UserActionTokens")
                        .HasForeignKey("IdUserAction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("QuickForm.Modules.Users.Domain.ExpirationDate", "ExpiresAt", b1 =>
                        {
                            b1.Property<Guid>("AuthActionTokenDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpiresAt");

                            b1.HasKey("AuthActionTokenDomainId");

                            b1.ToTable("AuthActionTokens", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("AuthActionTokenDomainId");
                        });

                    b.OwnsOne("QuickForm.Modules.Users.Domain.TokenVO", "Token", b1 =>
                        {
                            b1.Property<Guid>("AuthActionTokenDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Token");

                            b1.HasKey("AuthActionTokenDomainId");

                            b1.ToTable("AuthActionTokens", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("AuthActionTokenDomainId");
                        });

                    b.Navigation("Action");

                    b.Navigation("ExpiresAt")
                        .IsRequired();

                    b.Navigation("Token")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.UserDomain", b =>
                {
                    b.OwnsOne("QuickForm.Modules.Users.Domain.EmailVO", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Email");

                            b1.HasKey("UserDomainId");

                            b1.ToTable("Users", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("UserDomainId");
                        });

                    b.OwnsOne("QuickForm.Modules.Users.Domain.LastNameVO", "LastName", b1 =>
                        {
                            b1.Property<Guid>("UserDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserDomainId");

                            b1.ToTable("Users", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("UserDomainId");
                        });

                    b.OwnsOne("QuickForm.Modules.Users.Domain.NameVO", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("UserDomainId");

                            b1.ToTable("Users", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("UserDomainId");
                        });

                    b.OwnsOne("QuickForm.Modules.Users.Domain.PasswordVO", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("UserDomainId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PasswordHash");

                            b1.HasKey("UserDomainId");

                            b1.ToTable("Users", "Auth");

                            b1.WithOwner()
                                .HasForeignKey("UserDomainId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("LastName");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PasswordHash")
                        .IsRequired();
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.AuthActionDomain", b =>
                {
                    b.Navigation("UserActionTokens");
                });

            modelBuilder.Entity("QuickForm.Modules.Users.Domain.UserDomain", b =>
                {
                    b.Navigation("AuthActionTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
